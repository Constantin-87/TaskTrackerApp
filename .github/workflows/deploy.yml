name: Deploy to EC2 instance

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Deployment Environment"
        required: true
        default: "test"

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true

      - name: Install dependencies
        run: |
          gem install bundler
          bundle install

          - name: Deploy to EC2
          env:
            EC2_HOST: ${{ vars.EC2_HOST }}
            EC2_USER: ${{ vars.EC2_USER }}
            EC2_PATH_BACKEND: ${{ vars.EC2_PATH_BACKEND }}
            DB_HOST: ${{ vars.DB_HOST }}
            DB_USER: ${{ vars.DB_USER }}
            DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
            SECRET_KEY_BASE: ${{ secrets.SECRET_KEY_BASE }}
            DB_NAME: tasktracker-test
          run: |
            echo "$EC2_SSH_KEY" > ssh_key.pem
            chmod 600 ssh_key.pem
            rsync -avz --no-perms --no-owner --chmod=755 --no-group --exclude 'vendor' --exclude 'node_modules' --exclude 'log' --exclude '.git' --exclude 'tmp' -e "ssh -i ssh_key.pem -o StrictHostKeyChecking=no" . "${EC2_USER}@${EC2_HOST}:${EC2_PATH_BACKEND}"
            ssh -o StrictHostKeyChecking=no -i ssh_key.pem "${EC2_USER}@${EC2_HOST}" << EOF
              set -e
              cd ${EC2_PATH_BACKEND}

              # Set environment variables in .bashrc for deployuser
              echo "export DB_HOST=${DB_HOST}" >> ~/.bashrc
              echo "export DB_USER=${DB_USER}" >> ~/.bashrc
              echo "export DB_PASSWORD=${DB_PASSWORD}" >> ~/.bashrc
              echo "export DB_NAME=${DB_NAME}" >> ~/.bashrc
              echo "export SECRET_KEY_BASE=${SECRET_KEY_BASE}" >> ~/.bashrc
              source ~/.bashrc

              # Bundle install with a specific path
              bundle config set --local path 'vendor/bundle'
              bundle install --deployment --without development test

              # Run the database migration and restart services
              RAILS_ENV=production SECRET_KEY_BASE=${SECRET_KEY_BASE} bundle exec rails db:migrate
              sudo systemctl restart nginx
            EOF
          shell: bash

      - name: Clean up
        run: rm -f ssh_key.pem
